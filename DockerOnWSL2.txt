Installation :

	Follow the steps here : 
	https://docs.docker.com/engine/install/ubuntu/
	
	Install docker-compose 
	sudo apt-get install docker-compose
	
	To avoid running docker service again and again on every WSL startup
	In /etc/wsl.conf
	
		[boot]
		command="service docker start"
		
Run docker without sudo:

	sudo addgroup --system docker
	sudo adduser $USER docker
	newgrp docker
	# And something needs to be done so $USER always runs in group `docker` on the `Ubuntu` WSL
	sudo chown root:docker /var/run/docker.sock
	sudo chmod g+w /var/run/docker.sock

WSL

	wsl -l -v

		//checks list of installed distros

	wsl -l -o 
		
		//checks list of online available distros

	wsl --terminate Ubuntu
		//Shutdown the instance



Docker:
	sudo service docker status
		
	sudo service docker start
	
	sudo docker version


	- List docker images

		> docker images

		> docker image ls

	- Build image 

		> docker build -t <image-tag> .    //Run in the dir containing Dockerfile
		
		> docker build -f Dockerfile.dev   //In case of customName docker file to build image

	- Run container from image

		> docker run <image_name>

		//Override default command of image
		> docker run <image_name>  command_you_want_to_execute   


		> docker run = docker create <image_name> + docker start <container_id>


			> docker start -a <container_id>   //-a (attach to the container) prints output from container
			

	- List all running containers
		
		>docker ps

	
		//list all container which ran in past


	- Clear and reclaim space

		> docker system prune
			// remove all stopped containers
			// clear local image cache
		

	- logs
		
		> docker logs <container_id>


	- Stop the container

		> docker stop <container_id>   //Gives 10s to shut down, after which KILL signal is sent


		> docker kill  <container_id>


	- Execute another command apart from start up command of container

		> docker exec -it <container_id> second_command
				//-it allows to provide input to the container

		//Most common use of exec is to get command prompt in a container
			> docker exec -it <container_id> sh


		//Get command prompt of empty container (startup command is not run)
			> docker run -it <image> sh





Dockerfile:

	FROM  //specify base image
	
	RUN  //used to execute some command while we are preparing image 
	
	CMD	 //specify startup command of container
	
	WORKDIR /usr/app
		//Any following command will be executed relative to this path in the container
		//If above folder is not there, it will be created
			
			
	

Create image from running container	
	> docker commit -c "startup_command" container_id
	
	
	
	
	
	
Docker run with port mapping
	
	sudo docker run -p {route incoming requests to this port on local host to..} : {..this port inside container}  <image>

	sudo docker run -p 80:8080 tarun097/simpleweb


Docker Compose
	//Used to start up multiple docker containers at the same time
	//Automates some of the long-winded arguments we pass to 'docker run'

	docker-compose up  // will run the images
	
	docker-compose up --build //will build images first and then run
	
	docker-compose down  //stop all the containers
	
	docker-compose ps  //status of containers specified in docker-compose.yml file
	
	-d option to do in backgroud , you get control backgroud
	
		ex : docker-compose up -d
			 docker-compose down -d
			 
	NOTE : docker-compse command should be run from the dir where you have docker-compse.yml file
			 
	



Docker volumes:

	docker run -p 3000:3000 -v /app/node_modules  -v $(pwd):/app <image_id>
					
						//Map the pwd into the '/app' folder


On WSL2 there are permissions issues
so create user in docker file 
and while copying files, change ownership of the files 

	sudo docker run -p 3000:3000 -v /home/node/app/node_modules -v $(pwd):/home/node/app tarun097/frontend



Docker attach
	> sudo docker attach <docker_id>   // This will only attach to primary process of the container for stdin, stdout, stderr


